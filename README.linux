sysctl -a | grep net.ipv4.tcp_rmem
sysctl -a | grep net.ipv4.tcp_wmem				tcp发送接受缓冲区，大小。最小值，默认值，最大值

lsusb
dmesg | grep webcam

cat /proc/sys/net/ipv4/ip_local_port_range  ip端口范围
cat /proc/sys/fs/{nr_open,file-nr,file-max,epoll/max_user_watches}

sysctl -a | grep maxconn

cat /proc/net/dev

ltrace ifconfig
ltrace ./xx   (ltrace ./jiagou)
------------------------------------------

cat /proc/cpuinfo中的信息
processor       逻辑处理器的id。，线程数
physical id    物理封装的处理器的id。
core id        每个核心的id。
cpu cores      位于相同物理封装的处理器中的内核数量。
siblings       位于相同物理封装的处理器中的逻辑处理器的数量。

查看物理cpu个数
grep 'physical id' /proc/cpuinfo | sort -u

2
查看核心数量
grep 'core id' /proc/cpuinfo | sort -u | wc -l
3
查看线程数
grep 'processor' /proc/cpuinfo | sort -u | wc -l
 
1 查看物理CPU的个数
#cat /proc/cpuinfo |grep "physical id"|sort |uniq|wc –l
2、   查看逻辑CPU的个数
#cat /proc/cpuinfo |grep "processor"|wc –l
3、  查看CPU是几核
#cat /proc/cpuinfo |grep "cores"|uniq
4、  查看CPU的主频
#cat /proc/cpuinfo |grep MHz|uniq 
5、  # uname -a
6、  Linux euis1 2.6.9-55.ELsmp #1 SMP Fri Apr 20 17:03:35 EDT 2007 i686 i686 i386 GNU/Linux
  (查看当前操作系统内核信息)
7、  # cat /etc/issue | grep Linux
8、  Red Hat Enterprise Linux AS release 4 (Nahant Update 5(查看当前操作系统发行版信息)
9、  # cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
     8  Intel(R) Xeon(R) CPU   E5410   @ 2.33GHz
    (看到有8个逻辑CPU, 也知道了CPU型号)
     9   # cat /proc/cpuinfo | grep physical | uniq -c
     4   physical id      : 0
     4 physical id      : 1
(说明实际上是两颗4核的CPU)
 
  10、# getconf LONG_BIT
32
       (说明当前CPU运行在32bit模式下, 但不代表CPU不支持64bit)
 
11、# cat /proc/cpuinfo | grep flags | grep ' lm ' | wc –l
8(结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)
 
12、如何获得CPU的详细信息：
  linux命令：cat /proc/cpuinfo
  13、用命令判断几个物理CPU，几个核等：
  逻辑CPU个数：
   # cat /proc/cpuinfo | grep "processor" | wc -l
  物理CPU个数：
   # cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l
  14、每个物理CPU中Core的个数：
   # cat /proc/cpuinfo | grep "cpu cores" | wc -l
  15、是否为超线程？如果有两个逻辑CPU具有相同的”core id”，那么超线程是打开的。每个物理CPU中逻辑CPU(可能是core, threads或both)的个数：
# cat /proc/cpuinfo | grep "siblings"
 
  1.查看CPU信息命令
  cat /proc/cpuinfo
  2.查看内存信息命令
  cat /proc/meminfo
  3.查看硬盘信息命令
  fdisk -l

查看CPU信息（型号）
# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
      8  Intel(R) Xeon(R) CPU            E5410   @ 2.33GHz
(看到有8个逻辑CPU, 也知道了CPU型号)

# cat /proc/cpuinfo | grep physical | uniq -c
      4 physical id      : 0
      4 physical id      : 1
(说明实际上是两颗4核的CPU)
PS：Jay added on 10th, May, 2011
# 其实是可能有超线程HT技术，不一定是有4核，也可能是2核4线程；当时还理解不清楚

# getconf LONG_BIT
   32
(说明当前CPU运行在32bit模式下, 但不代表CPU不支持64bit)

# cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l
   8
(结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)
再完整看cpu详细信息, 不过大部分我们都不关心而已.
# dmidecode | grep 'Processor Information'

查看内 存信息
# cat /proc/meminfo

# uname -a
Linux euis1 2.6.9-55.ELsmp #1 SMP Fri Apr 20 17:03:35 EDT 2007 i686 i686 i386 GNU/Linux
(查看当前操作系统内核信息)

# cat /etc/issue | grep Linux
Red Hat Enterprise Linux AS release 4 (Nahant Update 5)
(查看当前操作系统发行版信息)

查看机器型号
# dmidecode | grep "Product Name"  

查看网卡信息
# dmesg | grep -i eth



------------------------
mysql命令
 1.连接数据库
    在终端输入命令连接数据库：
    mysql -u 用户名 -p
    然后在提示下输入密码，当然也可以把密码输在-p后面
2.显示所有用户和当前用户
    命令：
    show databases；
    use mysql;
    select host, user from user;
显示当前用户：
    select user();
3.切换用户
       MySQL很奇怪，如果要切换用户的话得用exit退出当前用户，再重新连接数据库。
       命令：
              exit
              mysql -u 用户名 -p

    4.修改用户密码 - 在终端命令行下进行
         mysqladmin -u 用户名 -p 旧密码 password 新密码

    5.创建用户和组 - 必须在终端中创建，进入mysql命令行后不可用
        命令：groupadd
       示例：
       lzl@lzl-virtual-machine:~$ groupadd mysql
       groupadd: group 'mysql' already exists

       命令：useradd
       示例：
       lzl@lzl-virtual-machine:~$ useradd -g mysql mysql
       useradd: user 'mysql' already exists

    6.数据库中创建新用户
       //创建用户guest，只允许其在安装Mysql的主机上登录，密码为空
       mysql> grant select,insert,update,delete on *.* to guest@localhost identified by "";
7.在数据库中删除用户
       命令：
       mysql> use mysql;
       mysql> delete from user where user="guest";

    8.创建和删除数据库
       //创建数据库mydb
       mysql> create database mydb;
       //删除数据库
       mysql> drop database if exists mydb;
9.创建表
       mysql> create table ulist
          -> ( id int auto_increment not null primary key,
          ->   uname char(20) not null,
           ->   upass char(30) not null,
           ->   regdate date
           -> );
10.在命令行下执行MySQL脚本
         命令： ./  完整路径\scriptname.sql
         或者： source  完整路径\scriptname.sql   （路径中的斜杠，Win下用反斜杠 \,Linux下用正斜杠 / ）  
一、连接MYSQL。
格式： mysql -h主机地址 -u用户名 －p用户密码
1、连接到本机上的MYSQL。
首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.
如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql>
2、连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：
mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）
3、退出MYSQL命令： exit （回车）
二、修改密码。
格式：mysqladmin -u用户名 -p旧密码 password 新密码
1、给root加个密码ab12。首先在DOS下进入目录mysql\bin，然后键入以下命令
mysqladmin -u root -password ab12
注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。
2、再将root的密码改为djg345。
mysqladmin -u root -p ab12 password djg345
三、增加新用户。
（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）
格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”
1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：
grant select,insert,update,delete on *.* to [email=test1@”%]test1@”%[/email]” Identified by “abc”;
但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。
2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），
这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。
grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “abc”;
如果你不想test2有密码，可以再打一个命令将密码消掉。
grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”;
下篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。
一、操作技巧
1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。
也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。
2、你可以使用光标上下键调出以前的命令。
二、显示命令
1、显示当前数据库服务器中的数据库列表：
mysql> SHOW DATABASES;
注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。
2、显示数据库中的数据表：
mysql> USE 库名；
mysql> SHOW TABLES;
3、显示数据表的结构：
mysql> DESCRIBE 表名;
4、建立数据库：
mysql> CREATE DATABASE 库名;
5、建立数据表：
mysql> USE 库名;
mysql> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));
6、删除数据库：
mysql> DROP DATABASE 库名;
7、删除数据表：
mysql> DROP TABLE 表名；
8、将表中记录清空：
mysql> DELETE FROM 表名;
9、显示表中的记录：
mysql> SELECT * FROM 表名;
10、往表中插入记录：
mysql> INSERT INTO 表名 VALUES (”hyq”,”M”);
11、更新表中数据：
mysql-> UPDATE 表名 SET 字段名1=’a',字段名2=’b’ WHERE 字段名3=’c';
12、用文本方式将数据装入数据表中：
mysql> LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;
13、导入.sql文件命令：
mysql> USE 数据库名;
mysql> SOURCE d:/mysql.sql;
14、命令行修改root密码：
mysql> UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;
mysql> FLUSH PRIVILEGES;
15、显示use的数据库名：
mysql> SELECT DATABASE();
16、显示当前的user：
mysql> SELECT USER();
三、一个建库和建表以及插入数据的实例
drop database if exists school; //如果存在SCHOOL则删除
create database school; //建立库SCHOOL
use school; //打开库SCHOOL
create table teacher //建立表TEACHER
(
id int(3) auto_increment not null primary key,
name char(10) not null,
address varchar(50) default ‘深圳’,
year date
); //建表结束
//以下为插入字段
insert into teacher values(”,’allen’,'大连一中’,'1976-10-10′);
insert into teacher values(”,’jack’,'大连二中’,'1975-12-23′);
如果你在mysql提示符键入上面的命令也可以，但不方便调试。
（1）你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\\下，并在DOS状态进入目录[url=file://\\mysql\\bin]\\mysql\\bin[/url]，然后键入以下命令：
mysql -uroot -p密码 < c:\\school.sql
如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。
（2）或者进入命令行后使用 mysql> source c:\\school.sql; 也可以将school.sql文件导入数据库中。
四、将文本数据转到数据库中
1、文本数据应符合的格式：字段数据之间用tab键隔开，null值用[url=file://\\n]\\n[/url]来代替.例：
3 rose 大连二中 1976-10-10
4 mike 大连一中 1975-12-23
假设你把这两组数据存为school.txt文件，放在c盘根目录下。
2、数据传入命令 load data local infile “c:\\school.txt” into table 表名;
注意：你最好将文件复制到[url=file://\\mysql\\bin]\\mysql\\bin[/url]目录下，并且要先用use命令打表所在的库。
五、备份数据库：（命令在DOS的[url=file://\\mysql\\bin]\\mysql\\bin[/url]目录下执行）
1.导出整个数据库
导出文件默认是存在mysql\bin目录下
mysqldump -u 用户名 -p 数据库名 > 导出的文件名
mysqldump -u user_name -p123456 database_name > outfile_name.sql
2.导出一个表
mysqldump -u 用户名 -p 数据库名 表名> 导出的文件名
mysqldump -u user_name -p database_name table_name > outfile_name.sql
3.导出一个数据库结构
mysqldump -u user_name -p -d –add-drop-table database_name > outfile_name.sql
-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table
4.带语言参数导出
mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name > outfile_name.sql


-----------------------------------------------------

Linux对外连接端口数限制 

这两天做压力测试，发现了一个问题，当模拟TCP client对外发起连接数达到28000左右时，开始大量抛如下异常：
    java.net.BindException: Cannot assign requested address
    at sun.nio.ch.Net.connect0(Native Method)
    at sun.nio.ch.Net.connect(Net.java:364)
    at sun.nio.ch.Net.connect(Net.java:356)
    at sun.nio.ch.UnixAsynchronousSocketChannelImpl.implConnect(UnixAsynchronousSocketChannelImpl.java:326)
    at sun.nio.ch.AsynchronousSocketChannelImpl.connect(AsynchronousSocketChannelImpl.java:195)
    at com.aliyun.talk.mon.stack.comm.AsyncConnection.connect(AsyncConnection.java:85)
    研究发现，Linux对外的随机分配端口是由一定限制的，理论上单机对外的端口最大值为65535，除去一些保留端口和被占用端口外，也应该在6W左右，但实际上单机建立对外连接时，默认不超过28232个连接。
    执行以下命令就很清楚原因了：
    $ cat /proc/sys/net/ipv4/ip_local_port_range
输出结果为：
    32768   61000
    这就是Linux随机分配端口的范围，如果在该范围内有被占用的端口，那么连接数肯定小于28232.如果想更改这个范围，可以执行以下命令：
    # echo "10000 65535" > /proc/sys/net/ipv4/ip_local_port_range

-----------------------------------


1-34号错误号是在内核源码的include/asm-generic/errno-base.h定义


35-132则是在include/asm-generic/errno.h中定义


剩下还有一些更大的错误号是留给内核级别的，如系统调用等，用户程序一般是看不见的这些号的，Ubuntu9.10中/usr/src/linux-headers-2.6.31-21-generic/include/linux/errno.h




#ifndef _ASM_GENERIC_ERRNO_BASE_H
#define _ASM_GENERIC_ERRNO_BASE_H

#define    EPERM         1    /* Operation not permitted */
#define    ENOENT         2    /* No such file or directory */
#define    ESRCH         3    /* No such process */
#define    EINTR         4    /* Interrupted system call */
#define    EIO         5    /* I/O error */
#define    ENXIO         6    /* No such device or address */
#define    E2BIG         7    /* Argument list too long */
#define    ENOEXEC         8    /* Exec format error */
#define    EBADF         9    /* Bad file number */
#define    ECHILD        10    /* No child processes */
#define    EAGAIN        11    /* Try again */
#define    ENOMEM        12    /* Out of memory */
#define    EACCES        13    /* Permission denied */
#define    EFAULT        14    /* Bad address */
#define    ENOTBLK        15    /* Block device required */
#define    EBUSY        16    /* Device or resource busy */
#define    EEXIST        17    /* File exists */
#define    EXDEV        18    /* Cross-device link */
#define    ENODEV        19    /* No such device */
#define    ENOTDIR        20    /* Not a directory */
#define    EISDIR        21    /* Is a directory */
#define    EINVAL        22    /* Invalid argument */
#define    ENFILE        23    /* File table overflow */
#define    EMFILE        24    /* Too many open files */
#define    ENOTTY        25    /* Not a typewriter */
#define    ETXTBSY        26    /* Text file busy */
#define    EFBIG        27    /* File too large */
#define    ENOSPC        28    /* No space left on device */
#define    ESPIPE        29    /* Illegal seek */
#define    EROFS        30    /* Read-only file system */
#define    EMLINK        31    /* Too many links */
#define    EPIPE        32    /* Broken pipe */
#define    EDOM        33    /* Math argument out of domain of func */
#define    ERANGE        34    /* Math result not representable */

#endif


#include <asm-generic/errno-base.h>

#define    EDEADLK        35    /* Resource deadlock would occur */
#define    ENAMETOOLONG    36    /* File name too long */
#define    ENOLCK        37    /* No record locks available */
#define    ENOSYS        38    /* Function not implemented */
#define    ENOTEMPTY    39    /* Directory not empty */
#define    ELOOP        40    /* Too many symbolic links encountered */
#define    EWOULDBLOCK    EAGAIN    /* Operation would block */
#define    ENOMSG        42    /* No message of desired type */
#define    EIDRM        43    /* Identifier removed */
#define    ECHRNG        44    /* Channel number out of range */
#define    EL2NSYNC    45    /* Level 2 not synchronized */
#define    EL3HLT        46    /* Level 3 halted */
#define    EL3RST        47    /* Level 3 reset */
#define    ELNRNG        48    /* Link number out of range */
#define    EUNATCH        49    /* Protocol driver not attached */
#define    ENOCSI        50    /* No CSI structure available */
#define    EL2HLT        51    /* Level 2 halted */
#define    EBADE        52    /* Invalid exchange */
#define    EBADR        53    /* Invalid request descriptor */
#define    EXFULL        54    /* Exchange full */
#define    ENOANO        55    /* No anode */
#define    EBADRQC        56    /* Invalid request code */
#define    EBADSLT        57    /* Invalid slot */

#define    EDEADLOCK    EDEADLK

#define    EBFONT        59    /* Bad font file format */
#define    ENOSTR        60    /* Device not a stream */
#define    ENODATA        61    /* No data available */
#define    ETIME        62    /* Timer expired */
#define    ENOSR        63    /* Out of streams resources */
#define    ENONET        64    /* Machine is not on the network */
#define    ENOPKG        65    /* Package not installed */
#define    EREMOTE        66    /* Object is remote */
#define    ENOLINK        67    /* Link has been severed */
#define    EADV        68    /* Advertise error */
#define    ESRMNT        69    /* Srmount error */
#define    ECOMM        70    /* Communication error on send */
#define    EPROTO        71    /* Protocol error */
#define    EMULTIHOP    72    /* Multihop attempted */
#define    EDOTDOT        73    /* RFS specific error */
#define    EBADMSG        74    /* Not a data message */
#define    EOVERFLOW    75    /* Value too large for defined data type */
#define    ENOTUNIQ    76    /* Name not unique on network */
#define    EBADFD        77    /* File descriptor in bad state */
#define    EREMCHG        78    /* Remote address changed */
#define    ELIBACC        79    /* Can not access a needed shared library */
#define    ELIBBAD        80    /* Accessing a corrupted shared library */
#define    ELIBSCN        81    /* .lib section in a.out corrupted */
#define    ELIBMAX        82    /* Attempting to link in too many shared libraries */
#define    ELIBEXEC    83    /* Cannot exec a shared library directly */
#define    EILSEQ        84    /* Illegal byte sequence */
#define    ERESTART    85    /* Interrupted system call should be restarted */
#define    ESTRPIPE    86    /* Streams pipe error */
#define    EUSERS        87    /* Too many users */
#define    ENOTSOCK    88    /* Socket operation on non-socket */
#define    EDESTADDRREQ    89    /* Destination address required */
#define    EMSGSIZE    90    /* Message too long */
#define    EPROTOTYPE    91    /* Protocol wrong type for socket */
#define    ENOPROTOOPT    92    /* Protocol not available */
#define    EPROTONOSUPPORT    93    /* Protocol not supported */
#define    ESOCKTNOSUPPORT    94    /* Socket type not supported */
#define    EOPNOTSUPP    95    /* Operation not supported on transport endpoint */
#define    EPFNOSUPPORT    96    /* Protocol family not supported */
#define    EAFNOSUPPORT    97    /* Address family not supported by protocol */
#define    EADDRINUSE    98    /* Address already in use */
#define    EADDRNOTAVAIL    99    /* Cannot assign requested address */
#define    ENETDOWN    100    /* Network is down */
#define    ENETUNREACH    101    /* Network is unreachable */
#define    ENETRESET    102    /* Network dropped connection because of reset */
#define    ECONNABORTED    103    /* Software caused connection abort */
#define    ECONNRESET    104    /* Connection reset by peer */
#define    ENOBUFS        105    /* No buffer space available */
#define    EISCONN        106    /* Transport endpoint is already connected */
#define    ENOTCONN    107    /* Transport endpoint is not connected */
#define    ESHUTDOWN    108    /* Cannot send after transport endpoint shutdown */
#define    ETOOMANYREFS    109    /* Too many references: cannot splice */
#define    ETIMEDOUT    110    /* Connection timed out */
#define    ECONNREFUSED    111    /* Connection refused */
#define    EHOSTDOWN    112    /* Host is down */
#define    EHOSTUNREACH    113    /* No route to host */
#define    EALREADY    114    /* Operation already in progress */
#define    EINPROGRESS    115    /* Operation now in progress */
#define    ESTALE        116    /* Stale NFS file handle */
#define    EUCLEAN        117    /* Structure needs cleaning */
#define    ENOTNAM        118    /* Not a XENIX named type file */
#define    ENAVAIL        119    /* No XENIX semaphores available */
#define    EISNAM        120    /* Is a named type file */
#define    EREMOTEIO    121    /* Remote I/O error */
#define    EDQUOT        122    /* Quota exceeded */

#define    ENOMEDIUM    123    /* No medium found */
#define    EMEDIUMTYPE    124    /* Wrong medium type */
#define    ECANCELED    125    /* Operation Canceled */
#define    ENOKEY        126    /* Required key not available */
#define    EKEYEXPIRED    127    /* Key has expired */
#define    EKEYREVOKED    128    /* Key has been revoked */
#define    EKEYREJECTED    129    /* Key was rejected by service */

/* for robust mutexes */
#define    EOWNERDEAD    130    /* Owner died */
#define    ENOTRECOVERABLE    131    /* State not recoverable */

#define ERFKILL        132    /* Operation not possible due to RF-kill */


#ifdef __KERNEL__

/*
 * These should never be seen by user programs. To return one of ERESTART*
 * codes, signal_pending() MUST be set. Note that ptrace can observe these
 * at syscall exit tracing, but they will never be left for the debugged user
 * process to see.
 */
#define ERESTARTSYS    512
#define ERESTARTNOINTR    513
#define ERESTARTNOHAND    514    /* restart if no handler.. */
#define ENOIOCTLCMD    515    /* No ioctl command */
#define ERESTART_RESTARTBLOCK 516 /* restart by calling sys_restart_syscall */

/* Defined for the NFSv3 protocol */
#define EBADHANDLE    521    /* Illegal NFS file handle */
#define ENOTSYNC    522    /* Update synchronization mismatch */
#define EBADCOOKIE    523    /* Cookie is stale */
#define ENOTSUPP    524    /* Operation is not supported */
#define ETOOSMALL    525    /* Buffer or request is too small */
#define ESERVERFAULT    526    /* An untranslatable error occurred */
#define EBADTYPE    527    /* Type not supported by server */
#define EJUKEBOX    528    /* Request initiated, but will not complete before timeout */
#define EIOCBQUEUED    529    /* iocb queued, will get completion event */
#define EIOCBRETRY    530    /* iocb queued, will trigger a retry */

#endif



-----------------------------------------------

linux的strace命令(详解)
本文详细讲述linux下的strace命令的用法。 

strace 命令是一种强大的工具，它能够显示所有由用户空间程序发出的系统调用。 
　　strace 显示这些调用的参数并返回符号形式的值。strace 从内核接收信息，而且不需要以任何特殊的方式来构建内核。 
　　下面记录几个常用 option . 
　　1 -f -F选项告诉strace同时跟踪fork和vfork出来的进程 
　　2 -o xxx.txt 输出到某个文件。 
　　3 -e execve 只记录 execve 这类系统调用 
　　————————————————— 
　　进程无法启动，软件运行速度突然变慢，程序的”SegmentFault”等等都是让每个Unix系统用户头痛的问题， 
　　本文通过三个实际案例演示如何使用truss、strace和ltrace这三个常用的调试工具来快速诊断软件的”疑难杂症”。 
　　 
　　 
　　truss和strace用来跟踪一个进程的系统调用或信号产生的情况，而 ltrace用来跟踪进程调用库函数的情况。truss是早期为System V R4开发的调试程序，包括Aix、FreeBSD在内的大部分Unix系统都自带了这个工具； 
　　而strace最初是为SunOS系统编写的，ltrace最早出现在GNU/DebianLinux中。 
　　这两个工具现在也已被移植到了大部分Unix系统中，大多数Linux发行版都自带了strace和ltrace，而FreeBSD也可通过Ports安装它们。 
　　 
　　你不仅可以从命令行调试一个新开始的程序，也可以把truss、strace或ltrace绑定到一个已有的PID上来调试一个正在运行的程序。三个调试工具的基本使用方法大体相同，下面仅介绍三者共有，而且是最常用的三个命令行参数： 
　　 
　　-f ：除了跟踪当前进程外，还跟踪其子进程。 
　　-o file ：将输出信息写到文件file中，而不是显示到标准错误输出（stderr）。 
　　-p pid ：绑定到一个由pid对应的正在运行的进程。此参数常用来调试后台进程。 
　　 
　　 使用上述三个参数基本上就可以完成大多数调试任务了，下面举几个命令行例子： 
　　truss -o ls.truss ls -al： 跟踪ls -al的运行，将输出信息写到文件/tmp/ls.truss中。 
　　strace -f -o vim.strace vim： 跟踪vim及其子进程的运行，将输出信息写到文件vim.strace。 
　　ltrace -p 234： 跟踪一个pid为234的已经在运行的进程。 
　　 
　　 三个调试工具的输出结果格式也很相似，以strace为例： 
　　 
　　brk(0) = 0×8062aa8 
　　brk(0×8063000) = 0×8063000 
　　mmap2(NULL, 4096, PROT_READ, MAP_PRIVATE, 3, 0×92f) = 0×40016000 
　　 
　　每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。 truss、strace和ltrace的工作原理大同小异，都是使用ptrace系统调用跟踪调试运行中的进程，详细原理不在本文讨论范围内，有兴趣可以参考它们的源代码。 
　　举两个实例演示如何利用这三个调试工具诊断软件的”疑难杂症”： 
　　 
　　案例一：运行clint出现Segment Fault错误 
　　 
　　操作系统：FreeBSD-5.2.1-release 
　　clint是一个C++静态源代码分析工具，通过Ports安装好之后，运行： 
　　 
　　# clint foo.cpp 
　　Segmentation fault (core dumped) 
　　 在Unix系统中遇见”Segmentation Fault”就像在MS Windows中弹出”非法操作”对话框一样令人讨厌。OK，我们用truss给clint”把把脉”： 
　　 
　　# truss -f -o clint.truss clint 
　　Segmentation fault (core dumped) 
　　# tail clint.truss 
　　 739: read(0×6,0×806f000,0×1000) = 4096 (0×1000) 
　　 739: fstat(6,0xbfbfe4d0) = 0 (0×0) 
　　 739: fcntl(0×6,0×3,0×0) = 4 (0×4) 
　　 739: fcntl(0×6,0×4,0×0) = 0 (0×0) 
　　 739: close(6) = 0 (0×0) 
　　 739: stat(”/root/.clint/plugins”,0xbfbfe680) ERR#2 ‘No such file or directory’ 
　　SIGNAL 11 
　　SIGNAL 11 
　　Process stopped because of: 16 
　　process exit, rval = 139 
　　我们用truss跟踪clint的系统调用执行情况，并把结果输出到文件clint.truss，然后用tail查看最后几行。 
　　注意看clint执行的最后一条系统调用（倒数第五行）：stat(”/root/.clint/plugins”,0xbfbfe680) ERR#2 ‘No such file or directory’，问题就出在这里：clint找不到目录”/root/.clint/plugins”，从而引发了段错误。怎样解决？很简单： mkdir -p /root/.clint/plugins，不过这次运行clint还是会”Segmentation Fault”9。继续用truss跟踪，发现clint还需要这个目录”/root/.clint/plugins/python”，建好这个目录后 clint终于能够正常运行了。 
　　 
　　案例二：vim启动速度明显变慢 
　　 
　　操作系统：FreeBSD-5.2.1-release 
　　vim版本为6.2.154，从命令行运行vim后，要等待近半分钟才能进入编辑界面，而且没有任何错误输出。仔细检查了.vimrc和所有的vim脚本都没有错误配置，在网上也找不到类似问题的解决办法，难不成要hacking source code？没有必要，用truss就能找到问题所在： 
　　 
　　# truss -f -D -o vim.truss vim 
　　 
　　这里-D参数的作用是：在每行输出前加上相对时间戳，即每执行一条系统调用所耗费的时间。我们只要关注哪些系统调用耗费的时间比较长就可以了，用less仔细查看输出文件vim.truss，很快就找到了疑点： 
　　 
　　735: 0.000021511 socket(0×2,0×1,0×0) = 4 (0×4) 
　　735: 0.000014248 setsockopt(0×4,0×6,0×1,0xbfbfe3c8,0×4) = 0 (0×0) 
　　735: 0.000013688 setsockopt(0×4,0xffff,0×8,0xbfbfe2ec,0×4) = 0 (0×0) 
　　735: 0.000203657 connect(0×4,{ AF_INET 10.57.18.27:6000 },16) ERR#61 ‘Connection refused’ 
　　735: 0.000017042 close(4) = 0 (0×0) 
　　735: 1.009366553 nanosleep(0xbfbfe468,0xbfbfe460) = 0 (0×0) 
　　735: 0.000019556 socket(0×2,0×1,0×0) = 4 (0×4) 
　　735: 0.000013409 setsockopt(0×4,0×6,0×1,0xbfbfe3c8,0×4) = 0 (0×0) 
　　735: 0.000013130 setsockopt(0×4,0xffff,0×8,0xbfbfe2ec,0×4) = 0 (0×0) 
　　735: 0.000272102 connect(0×4,{ AF_INET 10.57.18.27:6000 },16) ERR#61 ‘Connection refused’ 
　　735: 0.000015924 close(4) = 0 (0×0) 
　　735: 1.009338338 nanosleep(0xbfbfe468,0xbfbfe460) = 0 (0×0) 
　　 
　　vim试图连接10.57.18.27这台主机的6000端口（第四行的connect（）），连接失败后，睡眠一秒钟继续重试（第6行的 nanosleep（））。以上片断循环出现了十几次，每次都要耗费一秒多钟的时间，这就是vim明显变慢的原因。可是，你肯定会纳闷：”vim怎么会无缘无故连接其它计算机的6000端口呢？”。问得好，那么请你回想一下6000是什么服务的端口？没错，就是X Server。看来vim是要把输出定向到一个远程X Server，那么Shell中肯定定义了DISPLAY变量，查看.cshrc，果然有这么一行：setenv DISPLAY ${REMOTEHOST}:0，把它注释掉，再重新登录，问题就解决了。 
　　 
　　 
　　案例三：用调试工具掌握软件的工作原理 
　　 
　　操作系统：Red Hat Linux 9.0 
　　用调试工具实时跟踪软件的运行情况不仅是诊断软件”疑难杂症”的有效的手段，也可帮助我们理清软件的”脉络”，即快速掌握软件的运行流程和工作原理，不失为一种学习源代码的辅助方法。下面这个案例展现了如何使用strace通过跟踪别的软件来”触发灵感”，从而解决软件开发中的难题的。 
　　大家都知道，在进程内打开一个文件，都有唯一一个文件描述符（fd：file descriptor）与这个文件对应。而本人在开发一个软件过程中遇到这样一个问题： 
　　已知一个fd，如何获取这个fd所对应文件的完整路径？不管是Linux、FreeBSD或是其它Unix系统都没有提供这样的API，怎么办呢？我们换个角度思考：Unix下有没有什么软件可以获取进程打开了哪些文件？如果你经验足够丰富，很容易想到lsof，使用它既可以知道进程打开了哪些文件，也可以了解一个文件被哪个进程打开。好，我们用一个小程序来试验一下lsof，看它是如何获取进程打开了哪些文件。lsof： 显示进程打开的文件。 
　　 
　　/* testlsof.c */ 
　　#include #include #include #include #include 
　　int main(void) 
　　{ 
　　 open(”/tmp/foo”, O_CREAT|O_RDONLY); /* 打开文件/tmp/foo */ 
　　 sleep(1200); /* 睡眠1200秒，以便进行后续操作 */ 
　　 return 0; 
　　} 
　　 
　　将testlsof放入后台运行，其pid为3125。命令lsof -p 3125查看进程3125打开了哪些文件，我们用strace跟踪lsof的运行，输出结果保存在lsof.strace中： 
　　 
　　# gcc testlsof.c -o testlsof 
　　# ./testlsof & 
　　[1] 3125 
　　# strace -o lsof.strace lsof -p 3125 
　　 
　　我们以”/tmp/foo”为关键字搜索输出文件lsof.strace，结果只有一条： 
　　 
　　 
　　# grep ‘/tmp/foo’ lsof.strace 
　　readlink(”/proc/3125/fd/3″, “/tmp/foo”, 4096) = 8 
　　 
　　原来lsof巧妙的利用了/proc/nnnn/fd/目录（nnnn为pid）：Linux内核会为每一个进程在/proc/建立一个以其pid为名的目录用来保存进程的相关信息，而其子目录fd保存的是该进程打开的所有文件的fd。目标离我们很近了。好，我们到/proc/3125/fd/看个究竟： 
　　 
　　# cd /proc/3125/fd/ 
　　# ls -l 
　　total 0 
　　lrwx—— 1 root root 64 Nov 5 09:50 0 -> /dev/pts/0 
　　lrwx—— 1 root root 64 Nov 5 09:50 1 -> /dev/pts/0 
　　lrwx—— 1 root root 64 Nov 5 09:50 2 -> /dev/pts/0 
　　lr-x—— 1 root root 64 Nov 5 09:50 3 -> /tmp/foo 
　　# readlink /proc/3125/fd/3 
　　/tmp/foo 
　　 
　　答案已经很明显了：/proc/nnnn/fd/目录下的每一个fd文件都是符号链接，而此链接就指向被该进程打开的一个文件。我们只要用readlink()系统调用就可以获取某个fd对应的文件了，代码如下： 
　　 
　　 
　　#include #include #include #include #include #include 
　　int get_pathname_from_fd(int fd, char pathname[], int n) 
　　{ 
　　 char buf[1024]; 
　　 pid_t pid; 
　　 bzero(buf, 1024); 
　　 pid = getpid(); 
　　 snprintf(buf, 1024, “/proc/%i/fd/%i”, pid, fd); 
　　 return readlink(buf, pathname, n); 
　　} 
　　int main(void) 
　　{ 
　　 int fd; 
　　 char pathname[4096]; 
　　 bzero(pathname, 4096); 
　　 fd = open(”/tmp/foo”, O_CREAT|O_RDONLY); 
　　 get_pathname_from_fd(fd, pathname, 4096); 
　　 printf(”fd=%d; pathname=%sn”, fd, pathname); 
　　 return 0; 
　　} 
　　 
　　出于安全方面的考虑，在FreeBSD 5 之后系统默认已经不再自动装载proc文件系统，因此，要想使用truss或strace跟踪程序，你必须手工装载proc文件系统：mount -t procfs proc /proc；或者在/etc/fstab中加上一行： 
　　 
　　proc /proc procfs rw 0 0 

------------------------------------------------



boost版本为： boost_1_52_0
ubuntu版本为：ubuntu-12.04.1-desktop-i386

这里有两种安装方法：

=============
第一种：

也是最简单的：进入linux系统后，输入
   # apt-cache search boost
你将看到很多文件信息，你会看到其中一个文件叫 libboost-dev, 直接安装此文件即可：
   # apt-get install libboost-dev
这样就安装成功了。这个速度很快，是因为直接拷贝了lib文件到系统。
可以使用本文最后代码测试安装成功与否。

==============
第二种：
这个速度比较慢，因为需要自己编译出lib库。
首先下载boost库从www.boost.org这个网站下载linux的boost库，有2种格式，1) .bz2 2) .gz 
我下的是gz结尾的。放到linux的文件系统里，这里假设为/usr/local/boost_1_52_0.tar.gz

第一步：解压压缩包,命令如下，（#号仅为起始标记作用，敲命令时忽略）：
   # cd /usr/local/
   # tar -zxvf boost_1_52_0.tar.gz

第二步：解压后得到文件夹boost_1_52_0,运行如下命令：
   # cd boost_1_52_0/
   # ./bootstrap.sh  //这个命令类似于配好环境

第三步：运行二步命令后得到一个文件，名字是bjam，运行这个文件：
   # ./bjam    //这里需要十几分钟，完成后就代表安装成功了。

第四步：检验安装成功否：在linux下任意目录下创建test.cpp

#include<iostream>
#include<boost/lexical_cast.hpp>
int main()
{
   int a = boost::lexical_cast<int>("123456");
   std::cout << a <<std::endl;
   return 0;
}

这是一个字符串转化为整数的简单程序

运行命令:
   #  g++ test.cpp -o test
   #  ./test

将得到输出结果为：123456
代表boost安装成功，就可以尽情使用boost的美妙了！！！


ubuntu下安装protobuf
1.下载http://code.google.com/p/protobuf/downloads/list
2.解压
tar jxvf protobuf-2.4.1.tar.bz2 protobuf
3.编译
$ ./configure
$ make
$ make install
   
4.使用
/usr/bin/protoc /home/jiangrongyong/work/proto/*.proto --proto_path=/home/jiangrongyong/work/proto --java_out=/home/jiangrongyong/work/proto-output


protobuf安装后出现libprotobuf.so.6 not found after installation
http://yuu1987.iteye.com/blog/1240712


c-care安装
http://c-ares.haxx.se/
./configure
make
make install

libcurl安装
apt-get install libcurl3-dev

cmake安装
http://www.cmake.org/cmake/resources/software.html
./configure
make
make install

报错Something wicked happened resolving 'cn.archive.ubuntu.com:http
解决：/etc/resolv.conf    nameserver 8.8.8.8

apt-get install automake

http://ftp.gnu.org/gnu/automake/
下载1.13，自己安装


TCMalloc（Thread-Caching Malloc）是google开发的开源工具──“google-perftools”中的成员。与标准的glibc库的malloc相比，TCMalloc在内存的分配上效率和速度要高得多，可以在很大程度上提高MySQL服务器在高并发情况下的性能，降低系统负载。

　　TCMalloc的实现原理和测试报告请见一篇文章：《TCMalloc：线程缓存的Malloc》

　　为MySQL添加TCMalloc库的安装步骤（Linux环境）：

　　1、64位操作系统请先安装libunwind库，32位操作系统不要安装。libunwind库为基于64位CPU和操作系统的程序提供了基本的堆栈辗转开解功能，其中包括用于输出堆栈跟踪的API、用于以编程方式辗转开解堆栈的API以及支持C++异常处理机制的API。
wget http://download.savannah.gnu.org/releases/libunwind/libunwind-0.99-alpha.tar.gz
tar zxvf libunwind-0.99-alpha.tar.gz
cd libunwind-0.99-alpha/
CFLAGS=-fPIC ./configure
make CFLAGS=-fPIC
make CFLAGS=-fPIC install


　　2、安装google-perftools：
wget http://google-perftools.googlecode.com/files/google-perftools-0.97.tar.gz
tar zxvf google-perftools-0.97.tar.gz
cd google-perftools-0.97/
./configure
make && make install

echo "/usr/local/lib" > /etc/ld.so.conf.d/usr_local_lib.conf
/sbin/ldconfig


　　3、修改MySQL启动脚本（根据你的MySQL安装位置而定）：
vi /usr/local/mysql/bin/mysqld_safe

　　在# executing mysqld_safe的下一行，加上：
引用
export LD_PRELOAD=/usr/local/lib/libtcmalloc.so

　　保存后退出，然后重启MySQL服务器。


　　4、使用lsof命令查看tcmalloc是否起效：
/usr/sbin/lsof -n | grep tcmalloc

　　如果发现以下信息，说明tcmalloc已经起效：
　　mysqld    10847   mysql  mem       REG        8,5  1203756   20484960 /usr/local/lib/libtcmalloc.so.0.0.0   


　　注：2008年6月2日，修正了libunwind在x86_64位操作系统下的编译错误，TCMalloc无法加载等问题。

　　涉及修改内容：
　　1、libunwind的编译参数改为：
　　CFLAGS=-fPIC ./configure
　　make CFLAGS=-fPIC
　　make CFLAGS=-fPIC install

　　2、增加：
　　echo "/usr/local/lib" > /etc/ld.so.conf.d/usr_local_lib.conf
　　/sbin/ldconfig

　　3、修改MySQL加载TCMalloc的语句：
　　export LD_PRELOAD=/usr/local/lib/libtcmalloc.so


2012年tcmalloc学习笔记之一

一、tcmalloc是什么？
Thread-CachingMalloc线程缓存的Malloc
二、google开源工具google-perftools究竟有哪些工具？
1.TCMalloc
2.Heap-checker
3.Heap-profiler
4.CPU-profiler
三、为什么要选择tcmalloc
1.内存分配效率高;
2.运行速度快;
3.稳定性强;
4.能够有效降低系统负载;
四、应用场景
1.多核；
2.高并发；
3.多线程；
五、如何进行内存泄露检测
使用方法：
exportHEAPCHECK=TYPE
TYPE可以为：minimal、normal、strict、draconian
六、还有哪些内存管理库(或者说内存分配器)
1.标准的glibc
2.开源ptmalloc
3.jemalloc

七、64位操作系统与32位操作系统的区别
64位操作系统请先安装libunwind库，32位操作系统不要安装。
1.如何检测是多少位的操作系统
使用命令：uname-a

八、libunwind库的作用
libunwind库为基于64位CPU和操作系统的程序提供了基本的堆栈辗转开解功能，其中包括用于输出堆栈跟踪的API、用于以编程方式辗转开解堆栈的API以及支持C++异常处理机制的API。

九、代码的下载地址
http://code.google.com/p/gperftools/

十、最新版本
gperftools-2.0
时间：Feb3, 2012
下载地址：http://code.google.com/p/gperftools/downloads/detail?name=gperftools-2.0.tar.gz
十一、如何进行编译
./configure  --disable-cpu-profiler --disable-heap-profiler --disable-heap-checker --disable-debugall


十二、编译出错怎么处理
configure:error: C++ compiler cannot create executables
 
在使用./configure编译时出现:configure:error: C++ compiler cannot create executables错误,是因为系统中缺少以下两个包:
gcc-c++
libstdc++-devel

请执行如下命令：
apt-getinstall gcc-c++
apt-getinstall g++
apt-getinstall libstdc++-devel
笔者的机器：
运行apt-getinstall g++即可编译通过。
十二、如何使用
make
makeinstall
注意：64位操作系统一定要先装libunwind这个库。

十三、libunwind下载地址
http://mirror.yongbok.net/nongnu/libunwind/

十四、libunwind最新版本
1.0.1
libunwind-1.0.1.tar.gz
时间：16-Aug-2011 13:33     287
十五、编译libunwind解决办法
1.错误提示
/usr/include/x86_64-linux-gnu/bits/setjmp2.h:26:13: 错误： ‘longjmp’是未定义符号‘_longjmp’的别名

/usr/include/bits/setjmp2.h:26: error: ‘longjmp’ aliased to undefined symbol ‘_longjmp’ 
2.分析编译指令
gcc -U_FORTIFY_SOURCE -DHAVE_CONFIG_H -I. -I../include -I../include -I../include/tdep-x86_64 -I. -D_GNU_SOURCE -DNDEBUG -g -O2 -fexceptions -Wall -Wsign-compare -MT setjmp/longjmp.lo -MD -MP -MF setjmp/.deps/longjmp.Tpo -c setjmp/longjmp.c  -fPIC -DPIC -o setjmp/.libs/longjmp.o
3.错误原因
缺少U_FORTIFY_SOURCE编译开关。
4.解决办法
修改在libunwind-1.0.1/src目录下的Makefile文件

在608行针对CPPFLAGS编译选项，新增一个编译开关U_FORTIFY_SOURCE即可。

给自己当记事本。。
1 . 安装google-perftools
64位下安装google-perftools需要libunwind
wget http://download.savannah.gnu.org/releases/libunwind/libunwind-1.0.1.tar.gz
tar zxvf libunwind-1.0.1.tar.gz
cd libunwind-1.0.1
CFLAGS=-fpic ./configure --prefix=/usr
make CFLAGS=-fpic
make CFLAGS=-fpic install

wget http://google-perftools.googlecode.com/files/google-perftools-1.9.1.tar.gz
tar zxvf google-perftools-1.9.1.tar.gz
cd google-perftools-1.9.1
./configure --prefix=/usr --enable-frame-pointers
make -j4
make install

2 安装NGINX
groupadd www
useradd www -g www -s /sbin/nologin
zxvf nginx-1.0.11.tar.gz
#去掉nginx 默认的debug跟踪设置。
cd nginx-1.0.11
#第175行：前面加#注释掉改行。
#CFLAGS="$CFLAGS -g"
#编译选项改O2或者O3
NGX_GCC_OPT="-O2"

vi auto/cc/gcc


./configure --prefix=/usr/local/nginx --user=www --group=www  --with-http_stub_status_module --without-http_fastcgi_module --without-http_proxy_module --without-http_upstream_ip_hash_module --without-http_autoindex_module --without-http_ssi_module --without-http_proxy_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --without-http_uwsgi_module --without-http_scgi_module --without-http_memcached_module --with-google_perftools_module

make
make install

配置好nginx.conf后/usr/local/nginx/sbin/nginx -t测试
报libpcre.so.0找不到云云
重新ldconfig下。
启动成功

all warnings being treated as errors
注释werror

------------------------------
安装opencv
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local CMakeList.txt
make
make install
----------------------------
sudo apt-get install libsdl1.2-dev(比较大，10M左右)

--------------------------
 live555 静态库引用顺序
live555一般都是编译成静态的库，但是引用的时候需要注意他的顺序。如果引用的库正确而顺序不正确会出现找不到函数的错误。
正确的引用顺序是：libliveMedia.a   libBasicUsageEnvironment.a   libgroupsock.a   libUsageEnvironment.a
liveMedia要放在其他的前面
例如在qtcreator中加入live555的静态就是：
unix:!macx: LIBS += $$PWD/../live/liveMedia/libliveMedia.a  $$PWD/../live/BasicUsageEnvironment/libBasicUsageEnvironment.a  $$PWD/../live/groupsock/libgroupsock.a   $$PWD/../live/UsageEnvironment/libUsageEnvironment.a

注意使用qtcreator中add library添加的库中是LIBS += -LlibPath -llib 这个是针对动态库的，静态库不需要加-L。

------------------------


Ubuntu登录异常： 输入正确的密码， 但是却无法进入系统， 总是返回到登录界面， 但是用ctrl+alt+F1-F文字界面登录都可以进入。 - Karry Wang

今天打开电脑的时候， 在输入密码之后， 未进入ubuntu的桌面， 而是显示了几行英文之后有返回到了登录界面。显示的英文如下：

could not write bytes: Broken pipe

  *Stopping save kernel messages

  *Starting anac(h)romistic cron

  *Stopping anac(h)romistic cron

*Checking battery state......

*Stopping System V runlevel compathbility

刚开始以为可能是系统启动时出了问题， 所以就直接强制重启了， 但是之后还是一样的情况， 这让我着实有些着急了，  用ctrl+alt+F1或和是guest用户都可以进入桌面。 于是， 在个google上各种搜索， 才了解到， 这种问题很大一部分原因是因为在上次关机之前， 很多人都修改过PATH变量， 从而使得出现了这种问题， 但是我却想不出我之前有修改过PATH变量， 而且很多方法都尝试了一下都没成功。 所以以为自己的问题可能不是这个原因造成的， 之后在无意中又打开了一个博客， 并测试了一下上面的方法， 竟然成功了， 在这里要感谢下博主“有的放矢“。 http://blog.chinaunix.net/uid-422495-id-3317670.html 。 原来我的问题也是因为修改了PATH变量引起的， 是之前因为想让自己的shell对于失败信息显示其他的颜色， 而在.profile里面添加了一句与PATH有关的代码，从而修改了PATH

问题的解决方法是：

1.通过ctrl+alt+F1进入文字界面登录到自己的账户

2.查看自已用户主目录下的.xsession-errors文件， 里面有关于此问题出错的错误信息， 根据错误信息去修改错误。 我的显示是在.profile里出现语法错误， 进去一看果真是与PATH有关的代码

3.修改好之后， 重新启动， 再登录就OK了。

友情提示 ：对于一般的linux问题， 感觉不能一遇到稍微棘手点的问题就选择重装系统这个办法， 虽然绝对成功， 但是等下次遇到同样的问题就又傻眼了， 应该着手去解决问题， google很好用， 这样才有利于自己学习linux。

--------------------------------------------------------------------

kinect支持体感的识别
unity是游戏引擎
---------------------------

error while loading shared libraries的解決方法

那就表示系統不知道xxx.so 放在哪個目錄下。

這個時候就要在/etc/ld.so.conf中加入xxx.so所在的目錄。

 一般而言，有很多so檔會在/usr/local/lib這個目錄下，所以在/etc/ld.so.conf中加入/usr/local/lib這一行，可以解決此問題。

 

將 /etc/ld.so.conf存檔後，還要執行「/sbin/ldconfig –v」來更新一下才會生效。
-------------------------------------------

Ubuntu 13.10 解决虚拟机摄像头无法使用问题
找到的办法是，去官方下载Oracle VM VirtualBox Extension Pack,下载链接（https://www.virtualbox.org/wiki/Downloads），看好自己的Virtualbox版本，下载相应的pack包，下载后可以直接双击也可以使用设置加载的方式（管理->全局设定->扩展），最后结果如下

----------------------------------------------------------


